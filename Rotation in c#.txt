        public void rotationTranslation(double xRad, double yRad, double zRad)
        {

            double[,] oldRobotCord = new double[4, 1] { { xRobot }, { yRobot }, { zRobot }, { 0 } };

            double cosX = (double)Math.Cos(xRad);
            double sinX = (double)Math.Sin(xRad);

            double cosY = (double)Math.Cos(yRad);
            double sinY = (double)Math.Sin(yRad);

            double cosZ = (double)Math.Cos(zRad);
            double sinZ = (double)Math.Sin(zRad);

            double[,] zRot = new double[4, 4] { { cosZ, sinZ, 0, 0 }, 
                { -sinZ, cosZ, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0, 0, 1 } };

            double[,] yRot = new double[4, 4] { {cosY, 0, -sinY, 0 },
                {0, 1, 0, 0 }, {sinY, 0, cosY, 0 }, {0, 0, 0, 1 } };

            double[,] xRot = new double[4, 4] { { 1, 0, 0, 0 }, 
                { 0, cosX, sinX, 0 }, { 0, -sinX, cosX, 0 }, { 0, 0, 0, 1 } };

            double[,] rotateZ = new double[4, 1];


            for (int row = 0; row < 4; row++)
            {
                for (int col = 0; col < 1; col++)
                {
                    rotateZ[row, col] = 0;
                    for (int inner = 0; inner < 3; inner++)
                    {
                        rotateZ[row, col] += zRot[row, inner] * oldRobotCord[inner, col];
                    }
                }
            }

            double[,] rotateY = new double[4, 1];

            for (int row = 0; row < 4; row++)
            {
                for (int col = 0; col < 1; col++)
                {
                    rotateY[row, col] = 0;
                    for (int inner = 0; inner < 3; inner++)
                    {
                        rotateY[row, col] += yRot[row, inner] * rotateZ[inner, col];
                    }
                }
            }

            double[,] rotateX = new double[4, 1];

            for (int row = 0; row < 4; row++)
            {
                for (int col = 0; col < 1; col++)
                {
                    rotateX[row, col] = 0;
                    for (int inner = 0; inner < 3; inner++)
                    {
                        rotateX[row, col] += xRot[row, inner] * rotateY[inner, col];
                    }
                }
            }



            //Debug.WriteLine(rotateX[0,0] + " " + rotateX[1,0] + " " + rotateX[2,0]+ " " + rotateX[3,0]);

        }



        //public void rotationTranslation(double xRad, double yRad, double zRad)
        //{
        //    var oldRobotCord = new double[4, 1] { { xRobot }, { yRobot }, { zRobot }, { 0 } };

        //    double xtrans = xRobot * 83.66399492;
        //    double ytrans = yRobot * -716.879172118;
        //    double ztrans = zRobot * 531.771925931;

        //    var transRobCord = new double[4, 1] { { xtrans }, { ytrans }, { ztrans }, { 0 } };

        //    double cosX = (double)Math.Cos(xRad);
        //    double sinX = (double)Math.Sin(xRad);

        //    double cosY = (double)Math.Cos(yRad);
        //    double sinY = (double)Math.Sin(yRad);

        //    double cosZ = (double)Math.Cos(zRad);
        //    double sinZ = (double)Math.Sin(zRad);

        //    var matrix = new double[4, 4] { {cosY*cosZ, -cosY*sinZ, sinY, 83.663994925 },
        //        {(cosX*sinZ) + (sinX*sinY*cosZ), (cosX*cosZ) - (sinX*sinY*sinZ), -sinX*cosY, -716.879172118 },
        //        {(sinX*sinZ) - (cosX*sinY*cosZ), (sinX*cosZ) + (cosX*sinY*sinZ), cosX*cosY, 531.771925931 },
        //        {0,0,0,1 }};

        //    var rotationTranslation = new double[4, 1] { { 0 }, { 0 }, { 0 }, { 0 } };

        //    for (int row = 0; row < 4; row++)
        //    {
        //        for (int col = 0; col < 1; col++)
        //        {
        //            rotationTranslation[row, col] = 0;
        //            for (int inner = 0; inner < 3; inner++)
        //            {
        //                rotationTranslation[row, col] += matrix[row, inner] * oldRobotCord[inner, col];
        //            }
        //        }
        //    }

        //    Debug.WriteLine("HERE " + rotationTranslation[2,0].ToString());
        //}